// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(BoardContext))]
    [Migration("20211108174443_absd3123")]
    partial class absd3123
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowPreviousEvaluations")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("DataBase.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("date");

                    b.Property<int>("AssessmentNumber")
                        .HasColumnType("int");

                    b.Property<int?>("AssessorId")
                        .HasColumnType("int");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("MarkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessorId");

                    b.HasIndex("ParameterId");

                    b.HasIndex("UserId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("DataBase.Entities.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Parametrs");
                });

            modelBuilder.Entity("DataBase.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 1,
                            RoleName = "employee"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "headOfDepartament"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "teamRole"
                        });
                });

            modelBuilder.Entity("DataBase.Entities.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SelectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectionQuery")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("DataBase.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Работает"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Уволен"
                        });
                });

            modelBuilder.Entity("DataBase.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Employee",
                            Password = "123",
                            RoleId = 1,
                            StatusId = 1,
                            SupervisorId = 4
                        },
                        new
                        {
                            Id = 2,
                            Login = "Admin",
                            Password = "123",
                            RoleId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Login = "Departament",
                            Password = "123",
                            RoleId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Login = "TeamLead",
                            Password = "123",
                            RoleId = 4,
                            StatusId = 1,
                            SupervisorId = 3
                        });
                });

            modelBuilder.Entity("DataBase.Entities.Department", b =>
                {
                    b.HasOne("DataBase.Entities.User", "DepartmentHead")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentHeadId")
                        .HasConstraintName("FK_Departments_Users");

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("DataBase.Entities.Evaluation", b =>
                {
                    b.HasOne("DataBase.Entities.User", "Assessor")
                        .WithMany("EvaluationAssessors")
                        .HasForeignKey("AssessorId")
                        .HasConstraintName("FK_Evaluations_Users1");

                    b.HasOne("DataBase.Entities.Parameter", "Parameter")
                        .WithMany("Evaluations")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("FK_Evaluations_Parameters")
                        .IsRequired();

                    b.HasOne("DataBase.Entities.User", "User")
                        .WithMany("EvaluationUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Evaluations_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessor");

                    b.Navigation("Parameter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBase.Entities.Parameter", b =>
                {
                    b.HasOne("DataBase.Entities.Department", "Department")
                        .WithMany("Parameters")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataBase.Entities.Selection", b =>
                {
                    b.HasOne("DataBase.Entities.Department", "Department")
                        .WithMany("Selections")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Selections_Departments")
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DataBase.Entities.User", b =>
                {
                    b.HasOne("DataBase.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Users_Departments")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBase.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles")
                        .IsRequired();

                    b.HasOne("DataBase.Entities.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Users_Statuses")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DataBase.Entities.Department", b =>
                {
                    b.Navigation("Parameters");

                    b.Navigation("Selections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataBase.Entities.Parameter", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DataBase.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataBase.Entities.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataBase.Entities.User", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EvaluationAssessors");

                    b.Navigation("EvaluationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
